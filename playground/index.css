/*!
 * FrontBox Style 0.0.1
 * Bartosz Piwek
 * https://github.com/BartoszPiwek/FrontBox-Style
 */
/*
Variables

Create Variables element

Style guide: Variables
*/
/*
Breakpoints

Default breakpoints variable. Variable can be overwrite.

Usage:
// $breakpoints : { 
// 		[key: string]: { 
// 			name: string; 
// 			size: number 
// 		}
// }
$breakpoints : { 
	mobile: (
		name: sm,
		size: 576
	),
	tablet: (
		name: md,
		size: 1000
	),
}

Default: 
$breakpoints: (
  mobile: (
    name: sm,
    size: 576
  ),
  fablet: (
    name: md,
    size: 768
  ),
  tablet: (
    name: lg,
    size: 992
  ),
  desktop: (
    name: xl,
    size: 1200
  ),
  desktop-hd: (
    name: hd,
    size: 1366
  ),
  desktop-wide: (
    name: whd,
    size: 1440
  )
);

Style guide: Variables.breakpoints
*/
/*
Modules

Create Modules element

Style guide: Modules
*/
/*
Click Expand

Create pseudo element `before` to expand click space.

Usage:
// $space : number
.link {
	@include add-click-expand($space);
}

Markup: click-expand.html

Style guide: Modules.Click expand
*/
/*
Fixed

Change to position fixed on iOS Safari while scrolling

Style guide: Fix.fixed
*/
/*
Row

Style form container for columns. 
Compatibility with [space](section-modules.html#modules-space) function

Style guide: Grid.row
*/
/*
Columns

Generate CSS flex columns. 

Function:
grid($grid-count, $breakpoints?);

Usage:
// $grid-count : number
// $grid-breakpoints : { 
// 		[key: string]: { 
// 			name: string; 
// 			size: number 
// 		}
// }
$breakpoint(
 xs: 0,
 sm: 576,
 md: 768,
 lg: 992,
}
@include grid(12, $breakpoints);

Style:
@include grid-style-row;

Markup: grid.html

Style guide: Grid.columns
*/
/*
Holder

Create ratio holder.

Usage:
// $width: number
// $height: number
.selector {
 @include add-holder($width, $height);
}

Style:
@include add-holder-style;

Markup: holder.html

Style guide: Blocks.Holder
*/
/*
Hover

Include function inside selector to style `:hover`, `:active` and `:focus` states. Style only trigger for non touch devices.<br>
> Set <b>true</b> for parameter <code>$hasParentTrigger</code> to create trigger hover class `&--hover` for any parent element. 

Function:
add-hover($hasParentTrigger);

Usage:
// $hasParentTrigger : boolean : false
.selector {
 @include add-hover(true) {
  // content 	
 };
}

OutputCSS:
@media (hover: hover) {
 .selector:hover,
 .selector:active,
 .selector:focus {
  // content 	
 }
}
@media (hover: hover) {
 .selector--hover:hover .selector,
 .selector--hover:active .selector,
 .selector--hover:focus .selector {
   // content 	
 }
}

Style guide: Modules.Hover
*/
/*
Input Placeholder

Include function inside selector `input` or `textarea` to style placeholder text.<br>

Function:
add-input-placeholder;

Usage:
input.selector {
 @include add-input-placeholder {
	// content
 }
}

OutputCSS:
input.selector::placeholder,
input.selector::-webkit-input-placeholder,
input.selector::-moz-placeholder,
input.selector:-ms-input-placeholder,
input.selector:-moz-placeholder {
 // content
}

Style guide: Modules.input-placeholder
*/
/* stylelint-disable */
/*
Scrollbar

Create custom scrollbar for selector.
Default class for this function named `.scrollbar` and located in [style/_tools.scss](https://github.com/BartoszPiwek/FrontBox-CSS/tree/master/src/style/_tools.scss) file.<br>

Function:
// $size : numberPixel
// $color-background : string
// $color-thumb : string
add-scrollbar($size, $color-background, $color-thumb);

Usage:
@include add-scrollbar(20px, #000, #FFF);

Markup: scrollbar.html

Style guide: Modules.Scrollbar
*/
/*
Space

Create space for flex box layout between element children's. Space can be created in asix x/y or both.

Function:
// $size : numberPixel
// $size-y : numberPixel? : $size
add-space-x($size);
add-space-y($size);
add-space($size, $size-y);

Usage:
.space {
 @include add-space(20px, 10px);
}
.space-x {
 @include add-space-x(20px);
}
.space-y {
 @include add-space-y(10px);
}

Markup: space.html

Style guide: Modules.space
*/
/*
Wrap

Crete wrapper element to hold content in specific width with optional aside space.
Space can be created in asix x (`padding left` and `padding-right`).

Function:
// $max-width : pixels
// $padding-x? : pixels
add-wrap($max-width, $padding-x);

Usage:
.wrap-header {
	@include add-wrap(1024px, 20px);
}

Style:
@include add-wrap-style;

Markup: wrap.html

Style guide: Modules.wrap
*/
/*
Functions

Create Functions element

Style guide: Functions
*/
/*
Styles

Create styles element

Style guide: Styles
*/
/* stylelint-disable property-no-vendor-prefix */
/* stylelint-disable selector-no-qualifying-type */
/*
Browser reset

Reset the styling of all HTML elements.

Usage:
@include add-browser-reset-style;

Style guide: Styles.Browser reset
*/
/* Main Elements */
/*
Clearfix

Create `.clearfix` class to force an element self-clear its children.

Usage:
@include add-cleartfix-style;

Markup: clearfix.html

Style guide: Styles.Clearfix
*/
/*
Generators

Create generators

Style guide: Generators
*/
/*
Responsive

Create responsive classes for content. 
Generated name selectors will have prefixed with breakpoint name and underscore.

Function:
add-responsive($breakpoints-array);

Arguments:
$breakpoints-array : { [key: string]: number }? : $breakpoints

Usage:
@include add-responsive {
	.foo {}	
}

OutputCSS:
.foo {}
@media screen and (min-width: 576px) {
 .sm_foo {}
}
@media screen and (min-width: 768px) {
 .md_foo {}
}
// and so on

Style guide: Generators.Responsive
*/
/*
Utility count

Create responsive classes for content. 
Generated name selectors will have prefixed with breakpoint name and underscore.

Function:
add-responsive($breakpoints-array);

Arguments:
$breakpoints-array : { [key: string]: number }? : $breakpoints

Usage:
@include add-responsive {
	.foo {}	
}

OutputCSS:
.foo {}
@media screen and (min-width: 576px) {
 .sm_foo {}
}
@media screen and (min-width: 768px) {
 .md_foo {}
}
// and so on

Style guide: Generators.Utility count
*/
/*
Shapes

Create shapes element

Style guide: Shapes
*/
/*
Square

Create square element. 

Markup: square.html

Style guide: Shapes.square
*/
/*
Triangle

Create triangle element.

Function:
// $width : number
// $height : number
// $position : 'up' | 'right' | 'down' | 'left'
// $color : string
add-triangle($width, $height, $position, $color);

Usage:
@include add-triangle(10, 10, 'top', #000);

Markup: triangle.html

Style guide: Shapes.Triangle
*/
/*
Circle

Create circle element. 

Markup: circle.html

Style guide: Shapes.circle
*/
.color-blue {
  color: blue; }

.color-red {
  color: red; }

.index-wrapper {
  position: relative;
  width: 100px;
  height: 100px; }

.index-item {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: red; }

.index-first {
  z-index: 1; }

.index-last {
  z-index: -1; }

.media-item {
  width: 100px;
  height: 100px;
  background: red; }

@media screen and (min-width: 1000px) {
  .media-md {
    display: block; } }

@media screen and (max-width: 999px) {
  .media-md {
    display: none; } }

@media screen and (max-width: 999px) {
  .media-max-md {
    display: block; } }

@media screen and (min-width: 1000px) {
  .media-max-md {
    display: none; } }

.wrap {
  width: 100%;
  margin-right: auto;
  margin-left: auto; }

.wrap {
  max-width: 240px;
  padding-right: 20px;
  padding-left: 20px; }

*,
*:after,
*:before {
  box-sizing: border-box;
  margin: 0;
  padding: 0; }

html {
  -webkit-text-size-adjust: 100%;
  -webkit-touch-callout: none; }

body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

iframe {
  border: 0; }

ol,
ul {
  list-style: none; }

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: 16px;
  font-weight: normal; }

a {
  display: inline;
  color: inherit;
  text-decoration: none; }

iframe {
  border: 0; }

table {
  border-spacing: 0; }

/* Form Elements */
[type="text"]::-ms-clear, [type="text"]::-ms-reveal {
  display: none;
  width: 0;
  height: 0; }

[type="number"] {
  -moz-appearance: textfield; }

[type="checkbox"],
[type="radio"] {
  position: absolute !important;
  bottom: 0 !important;
  left: 50% !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  overflow: hidden !important;
  clip: rect(0 0 0 0) !important;
  border: 0 !important;
  white-space: nowrap !important;
  -webkit-clip-path: inset(50%) !important;
  clip-path: inset(50%) !important; }

[type="button"],
[type="reset"],
[type="submit"],
button {
  border: 0;
  background: 0 0;
  cursor: pointer;
  -webkit-appearance: button; }

label [for] {
  cursor: pointer; }

address {
  font-style: normal; }

.holder {
  position: relative; }
  .holder:before {
    content: '';
    display: block;
    width: 100%; }
  .holder__content {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; }

.holder:before {
  padding-top: 50%; }
