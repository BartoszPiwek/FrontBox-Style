/*!
 * FrontBox Style 0.0.3
 * Bartosz Piwek
 * https://github.com/BartoszPiwek/FrontBox-Style
 */
/*
Variables

Organize values using variables map and easy-to-read functions or mixins.

Style guide: Variables
*/
/*
Breakpoints

[Default](https://github.com/BartoszPiwek/FrontBox-Style/blob/master/src/variables/breakpoints.scss) breakpoints screen map.
> Declaration can be overwrite by own breakpoints.

Usage:
// $breakpoints : { 
// 		[key: string]: { 
// 			name: string; 
// 			size: number 
// 		}
// }
$breakpoints : { 
	mobile: (
		name: sm,
		size: 576
	),
	tablet: (
		name: md,
		size: 1000
	),
}

Style guide: Variables.breakpoints
*/
/*
Color

Get color value.<br>
Function `color` return index value from `$colors` map.

Function:
// $valueIndex: string
color($valueIndex);

Usage:
// $colors : { 
// 	[key: string]: string
// }
$colors: (
  primary: blue,
  secondary: red
);
.element {
	background: color('primary');
}

Markup: color.html

Style guide: Variables.color
*/
/*
Index

Get index value for property `z-index`.<br>
Function `index` return index value from `$indexes` map.

Function:
// $id: string
index($id);

Usage:
// $indexes : { 
// 	[key: string]: number
// }
$indexes: (
	first: 1,
	last: -1
);
.element {
	z-index: index('first');
}

Markup: index.html

Style guide: Variables.Index
*/
/*
Font

Get font family value.<br>
Function `font` return index value from `$fonts` map.

Function:
// $valueIndex: string
font($valueIndex);

Usage:
// $fonts : { 
// 	[key: string]: string
// }
$fonts: (
  default: "Arial",
  monospace: "monospace"
);
.text {
  &-default {
    font-family: font('default');
  }
  &-monospace {
    font-family: font('monospace');
  }
}

Markup: font.html

Style guide: Variables.font
*/
/*
Media

Wrap code in breakpoint screen.

Mixins `media` (min-width) and `media-max` (max-width) take parameter `$name` to wrap code in media query.

> `$name` is variable map name inside `$breakpoints` map ([go to section](section-variables.html#variables-breakpoints)).

Function:
// $index: string;
@include media($index) {}
@include media-max($index) {}

Usage:
.element {
	@include media(tablet) {
		color: red;
	}
	@include media-max(tablet) {
		display: none;
	}
}

Markup: media.html

Style guide: Variables.media
*/
/*
Functions

Resolve common problems with SCSS preprocessor.

Style guide: Functions
*/
/*
Map deep get

Fetch deeply nested values from a map.

Function:
// $deep-map: { 
// 		[key: string]: { 
// 			...
// 		}
// }
// $keys: string[]
map-deep-get($deep-map, $keys...);

Usage:
$deep-map: (
  "first": (
    value: red,
  ),
);
element {
  color: map-deep-get($deep-map, first, value)";
}

Markup: map-deep-get.html

Styleguide: Functions.Map deep get
*/
/*
Modules

Change element behaviors.

Style guide: Modules
*/
/*
Click Expand

Expand click space using pseudo element `before` with prepared class `click-expand`.

Style:
.click-expand {
	@extend %click-expand-style;
}

Function:
// $space : numberPixel
@include click-expand($space);

Usage:
.link {
	@include click-expand(20px);
}

Markup: click-expand.html

Style guide: Modules.Click expand
*/
/*
Fixed

Change to position fixed on iOS Safari while scrolling

Style guide: Fix.fixed
*/
/*
Hover

Style states `:hover`, `:active` and `:focus`.

Set flag `$canParentTrigger` to create trigger hover class `&--hover` for any parent element. 

> States only trigger for non touch devices.

Function:
// $canParentTrigger : boolean : false
@include hover($canParentTrigger) {};

Usage:
.selector {
 @include hover(true) {
  color: red;
 };
}

HTML:
<div>
	<span class="selector"></span>
</div>
<div class="selector--hover">
	<span class="selector"></span>
</div>

Markup: hover.html

Style guide: Modules.Hover
*/
/*
Scrollbar

Style browser scrollbar.

Function:
// $size : numberPixel
// $color-background : string
// $color-thumb : string
@include scrollbar($size, $color-background, $color-thumb);

Usage:
.scrollbar {
	@include scrollbar(20px, #000, #FFF);
}

HTML:
<div class="scollbar"></div>

Markup: scrollbar.html

Style guide: Modules.Scrollbar
*/
/*
Layout

Style guide: Layout
*/
/*
Grid

Grid system based on the flex display property.

Include style form columns and rows.

Usage:
.wrap {
	@extend %grid-style;
}

Style guide: Layout.Grid
*/
.grid {
  display: flex;
  position: relative;
  flex-direction: row;
  flex-wrap: wrap;
  width: 100%; }
  .grid > * {
    display: flex;
    position: relative;
    flex-direction: column;
    flex-grow: 0;
    flex-shrink: 0;
    height: auto !important;
    min-height: 1px; }
    .grid > * > * {
      flex: 1 1 auto; }

/*
Columns

Generate `col` classes.

Parameter `$grid-breakpoints` on default is [$breakpoints](section-variables.html#variables-breakpoints).

> Responsive classes has automatic generated using [responsive](section-functions.html#functions-responsive) mixin.

Function:
// $grid-count : number
// $grid-breakpoints? : $breakpoints
@include grid($grid-count, $breakpoints?);

Usage:
@include grid(12);

Markup: grid.html

Style guide: Layout.Grid.Columns
*/
/*
Space

Create space between element children's.

Function:
// $space-horizontal : numberPixel
// $space-vertical-y : numberPixel? : $space-horizontal
space-x($space-horizontal);
space-y($space-vertical);
space($space-horizontal, $space-vertical);

Usage:
.space {
 @include space(20px, 10px);
}
.space-x {
 @include space-x(20px);
}
.space-y {
 @include space-y(10px);
}

Markup: space.html

Style guide: Layout.space
*/
/*
Wrap

Crete wrapper element to hold content in specific width with optional aside space.

Style:
.wrap {
	@extend %wrap-style;
}

Function:
// $max-width : pixels
// $space-aside? : pixels
wrap($max-width, $space-aside);

Usage:
.wrap {
	@include wrap(1024px, 16px);
}

Markup: wrap.html

Style guide: Layout.wrap
*/
/*
Group 

Center elements in content.

Style:
.group {
	@extend %group-style;
}

Markup: group.html

Style guide: Layout.group
*/
/*
Styles

Styles for selectors/classes.

Style guide: Styles
*/
/*
Browser reset

Set of CSS rules that resets the styling of all HTML elements to a consistent baseline.
> Recommended for all projects!

Usage:
@include browser-reset-style;

Style guide: Styles.Browser reset
*/
/* stylelint-disable property-no-vendor-prefix */
/* stylelint-disable selector-no-qualifying-type */
/*
Clearfix

Prepared class `clearfix` to force an element self-clear its children.

Usage:
.clearfix {
 @extend %clearfix-style;
}

Markup: clearfix.html

Style guide: Styles.Clearfix
*/
/*
Truncate

Truncate string.

Style:
.truncate {
 @extend %truncate-style;
 &-wrap {
	 @extend %truncate-wrap-style;
 }
}

Markup: truncate.html

Style guide: Styles.Truncate
*/
/*
Generators

Create dynamic code.

Style guide: Generators
*/
/*
Responsive

Create responsive classes with breakpoint name prefix. 

Parameter `$breakpoints-array` on default is [$breakpoints](section-variables.html#variables-breakpoints).

Function:
// $breakpoints-array? : $breakpoints
responsive($breakpoints-array?);

Usage:
@include responsive {
	@at-root .color-red {
		color: red;
	}
}

HTML:
<div class="md_color-red">Color red</div>

Markup: responsive.html

Style guide: Generators.Responsive
*/
/*
Utility count

Create responsive classes for content. 
Generated name selectors will have prefixed with breakpoint name and underscore.

Function:
responsive($breakpoints-array);

Arguments:
$breakpoints-array : { [key: string]: number }? : $breakpoints

Usage:
@include responsive {
	.foo {}	
}

OutputCSS:
.foo {}
@media screen and (min-width: 576px) {
 .sm_foo {}
}
@media screen and (min-width: 768px) {
 .md_foo {}
}
// and so on

Style guide: Generators.Utility count
*/
/*
Shapes

Create CSS shapes.

Style guide: Shapes
*/
/*
Square

Responsive square shape based on element width.

Usage:
.square {
 @extend %square-style;
}

Markup: square.html

Style guide: Shapes.square
*/
/*
Triangle

Create triangle shape.

Mixin `rectangle` create triangle.

Function:
// $width : numberPixel
// $height : numberPixel
// $position : 'up' | 'right' | 'down' | 'left'
// $color : string
@include triangle($width, $height, $position, $color);

Usage:
.triangle-up {
	@include triangle(20px, 20px, 'top', #000);
}

HTML:
<div class="triangle-up"></div>

Markup: triangle.html

Style guide: Shapes.Triangle
*/
/*
Circle

Responsive circle shape based on element width.

Child element will be centered on axis xy.

Usage: 
.circle {
  @extend %circle-style;
}

Markup: circle.html

Style guide: Shapes.circle
*/
/*
Rectangle

Responsive rectangle shape based on element width.

Mixin `rectangle` create width to height ratio.

Function:
// $width: number
// $height: number
@include rectangle($width, $height);

Usage:
.rectangle {
 @extend %rectangle-style;
 @include rectangle(16, 9);
}

Markup: rectangle.html

Style guide: Shapes.Rectangle
*/
.col-1 {
  flex-basis: 8.33333%;
  max-width: 8.33333%; }

.pull-1 {
  right: 8.33333% !important; }

.push-1 {
  left: 8.33333% !important; }

.col-2 {
  flex-basis: 16.66667%;
  max-width: 16.66667%; }

.pull-2 {
  right: 16.66667% !important; }

.push-2 {
  left: 16.66667% !important; }

.col-3 {
  flex-basis: 25%;
  max-width: 25%; }

.pull-3 {
  right: 25% !important; }

.push-3 {
  left: 25% !important; }

.col-4 {
  flex-basis: 33.33333%;
  max-width: 33.33333%; }

.pull-4 {
  right: 33.33333% !important; }

.push-4 {
  left: 33.33333% !important; }

.col-5 {
  flex-basis: 41.66667%;
  max-width: 41.66667%; }

.pull-5 {
  right: 41.66667% !important; }

.push-5 {
  left: 41.66667% !important; }

.col-6 {
  flex-basis: 50%;
  max-width: 50%; }

.pull-6 {
  right: 50% !important; }

.push-6 {
  left: 50% !important; }

.col-7 {
  flex-basis: 58.33333%;
  max-width: 58.33333%; }

.pull-7 {
  right: 58.33333% !important; }

.push-7 {
  left: 58.33333% !important; }

.col-8 {
  flex-basis: 66.66667%;
  max-width: 66.66667%; }

.pull-8 {
  right: 66.66667% !important; }

.push-8 {
  left: 66.66667% !important; }

.col-9 {
  flex-basis: 75%;
  max-width: 75%; }

.pull-9 {
  right: 75% !important; }

.push-9 {
  left: 75% !important; }

.col-10 {
  flex-basis: 83.33333%;
  max-width: 83.33333%; }

.pull-10 {
  right: 83.33333% !important; }

.push-10 {
  left: 83.33333% !important; }

.col-11 {
  flex-basis: 91.66667%;
  max-width: 91.66667%; }

.pull-11 {
  right: 91.66667% !important; }

.push-11 {
  left: 91.66667% !important; }

.col-12 {
  flex-basis: 100%;
  max-width: 100%; }

@media screen and (min-width: 576px) {
  .sm_col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%; }
  .sm_pull-1 {
    right: 8.33333% !important; }
  .sm_push-1 {
    left: 8.33333% !important; }
  .sm_col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%; }
  .sm_pull-2 {
    right: 16.66667% !important; }
  .sm_push-2 {
    left: 16.66667% !important; }
  .sm_col-3 {
    flex-basis: 25%;
    max-width: 25%; }
  .sm_pull-3 {
    right: 25% !important; }
  .sm_push-3 {
    left: 25% !important; }
  .sm_col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%; }
  .sm_pull-4 {
    right: 33.33333% !important; }
  .sm_push-4 {
    left: 33.33333% !important; }
  .sm_col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%; }
  .sm_pull-5 {
    right: 41.66667% !important; }
  .sm_push-5 {
    left: 41.66667% !important; }
  .sm_col-6 {
    flex-basis: 50%;
    max-width: 50%; }
  .sm_pull-6 {
    right: 50% !important; }
  .sm_push-6 {
    left: 50% !important; }
  .sm_col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%; }
  .sm_pull-7 {
    right: 58.33333% !important; }
  .sm_push-7 {
    left: 58.33333% !important; }
  .sm_col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%; }
  .sm_pull-8 {
    right: 66.66667% !important; }
  .sm_push-8 {
    left: 66.66667% !important; }
  .sm_col-9 {
    flex-basis: 75%;
    max-width: 75%; }
  .sm_pull-9 {
    right: 75% !important; }
  .sm_push-9 {
    left: 75% !important; }
  .sm_col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%; }
  .sm_pull-10 {
    right: 83.33333% !important; }
  .sm_push-10 {
    left: 83.33333% !important; }
  .sm_col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%; }
  .sm_pull-11 {
    right: 91.66667% !important; }
  .sm_push-11 {
    left: 91.66667% !important; }
  .sm_col-12 {
    flex-basis: 100%;
    max-width: 100%; } }

@media screen and (min-width: 768px) {
  .md_col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%; }
  .md_pull-1 {
    right: 8.33333% !important; }
  .md_push-1 {
    left: 8.33333% !important; }
  .md_col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%; }
  .md_pull-2 {
    right: 16.66667% !important; }
  .md_push-2 {
    left: 16.66667% !important; }
  .md_col-3 {
    flex-basis: 25%;
    max-width: 25%; }
  .md_pull-3 {
    right: 25% !important; }
  .md_push-3 {
    left: 25% !important; }
  .md_col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%; }
  .md_pull-4 {
    right: 33.33333% !important; }
  .md_push-4 {
    left: 33.33333% !important; }
  .md_col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%; }
  .md_pull-5 {
    right: 41.66667% !important; }
  .md_push-5 {
    left: 41.66667% !important; }
  .md_col-6 {
    flex-basis: 50%;
    max-width: 50%; }
  .md_pull-6 {
    right: 50% !important; }
  .md_push-6 {
    left: 50% !important; }
  .md_col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%; }
  .md_pull-7 {
    right: 58.33333% !important; }
  .md_push-7 {
    left: 58.33333% !important; }
  .md_col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%; }
  .md_pull-8 {
    right: 66.66667% !important; }
  .md_push-8 {
    left: 66.66667% !important; }
  .md_col-9 {
    flex-basis: 75%;
    max-width: 75%; }
  .md_pull-9 {
    right: 75% !important; }
  .md_push-9 {
    left: 75% !important; }
  .md_col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%; }
  .md_pull-10 {
    right: 83.33333% !important; }
  .md_push-10 {
    left: 83.33333% !important; }
  .md_col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%; }
  .md_pull-11 {
    right: 91.66667% !important; }
  .md_push-11 {
    left: 91.66667% !important; }
  .md_col-12 {
    flex-basis: 100%;
    max-width: 100%; } }

@media screen and (min-width: 992px) {
  .lg_col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%; }
  .lg_pull-1 {
    right: 8.33333% !important; }
  .lg_push-1 {
    left: 8.33333% !important; }
  .lg_col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%; }
  .lg_pull-2 {
    right: 16.66667% !important; }
  .lg_push-2 {
    left: 16.66667% !important; }
  .lg_col-3 {
    flex-basis: 25%;
    max-width: 25%; }
  .lg_pull-3 {
    right: 25% !important; }
  .lg_push-3 {
    left: 25% !important; }
  .lg_col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%; }
  .lg_pull-4 {
    right: 33.33333% !important; }
  .lg_push-4 {
    left: 33.33333% !important; }
  .lg_col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%; }
  .lg_pull-5 {
    right: 41.66667% !important; }
  .lg_push-5 {
    left: 41.66667% !important; }
  .lg_col-6 {
    flex-basis: 50%;
    max-width: 50%; }
  .lg_pull-6 {
    right: 50% !important; }
  .lg_push-6 {
    left: 50% !important; }
  .lg_col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%; }
  .lg_pull-7 {
    right: 58.33333% !important; }
  .lg_push-7 {
    left: 58.33333% !important; }
  .lg_col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%; }
  .lg_pull-8 {
    right: 66.66667% !important; }
  .lg_push-8 {
    left: 66.66667% !important; }
  .lg_col-9 {
    flex-basis: 75%;
    max-width: 75%; }
  .lg_pull-9 {
    right: 75% !important; }
  .lg_push-9 {
    left: 75% !important; }
  .lg_col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%; }
  .lg_pull-10 {
    right: 83.33333% !important; }
  .lg_push-10 {
    left: 83.33333% !important; }
  .lg_col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%; }
  .lg_pull-11 {
    right: 91.66667% !important; }
  .lg_push-11 {
    left: 91.66667% !important; }
  .lg_col-12 {
    flex-basis: 100%;
    max-width: 100%; } }

@media screen and (min-width: 1200px) {
  .xl_col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%; }
  .xl_pull-1 {
    right: 8.33333% !important; }
  .xl_push-1 {
    left: 8.33333% !important; }
  .xl_col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%; }
  .xl_pull-2 {
    right: 16.66667% !important; }
  .xl_push-2 {
    left: 16.66667% !important; }
  .xl_col-3 {
    flex-basis: 25%;
    max-width: 25%; }
  .xl_pull-3 {
    right: 25% !important; }
  .xl_push-3 {
    left: 25% !important; }
  .xl_col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%; }
  .xl_pull-4 {
    right: 33.33333% !important; }
  .xl_push-4 {
    left: 33.33333% !important; }
  .xl_col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%; }
  .xl_pull-5 {
    right: 41.66667% !important; }
  .xl_push-5 {
    left: 41.66667% !important; }
  .xl_col-6 {
    flex-basis: 50%;
    max-width: 50%; }
  .xl_pull-6 {
    right: 50% !important; }
  .xl_push-6 {
    left: 50% !important; }
  .xl_col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%; }
  .xl_pull-7 {
    right: 58.33333% !important; }
  .xl_push-7 {
    left: 58.33333% !important; }
  .xl_col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%; }
  .xl_pull-8 {
    right: 66.66667% !important; }
  .xl_push-8 {
    left: 66.66667% !important; }
  .xl_col-9 {
    flex-basis: 75%;
    max-width: 75%; }
  .xl_pull-9 {
    right: 75% !important; }
  .xl_push-9 {
    left: 75% !important; }
  .xl_col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%; }
  .xl_pull-10 {
    right: 83.33333% !important; }
  .xl_push-10 {
    left: 83.33333% !important; }
  .xl_col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%; }
  .xl_pull-11 {
    right: 91.66667% !important; }
  .xl_push-11 {
    left: 91.66667% !important; }
  .xl_col-12 {
    flex-basis: 100%;
    max-width: 100%; } }

@media screen and (min-width: 1366px) {
  .hd_col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%; }
  .hd_pull-1 {
    right: 8.33333% !important; }
  .hd_push-1 {
    left: 8.33333% !important; }
  .hd_col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%; }
  .hd_pull-2 {
    right: 16.66667% !important; }
  .hd_push-2 {
    left: 16.66667% !important; }
  .hd_col-3 {
    flex-basis: 25%;
    max-width: 25%; }
  .hd_pull-3 {
    right: 25% !important; }
  .hd_push-3 {
    left: 25% !important; }
  .hd_col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%; }
  .hd_pull-4 {
    right: 33.33333% !important; }
  .hd_push-4 {
    left: 33.33333% !important; }
  .hd_col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%; }
  .hd_pull-5 {
    right: 41.66667% !important; }
  .hd_push-5 {
    left: 41.66667% !important; }
  .hd_col-6 {
    flex-basis: 50%;
    max-width: 50%; }
  .hd_pull-6 {
    right: 50% !important; }
  .hd_push-6 {
    left: 50% !important; }
  .hd_col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%; }
  .hd_pull-7 {
    right: 58.33333% !important; }
  .hd_push-7 {
    left: 58.33333% !important; }
  .hd_col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%; }
  .hd_pull-8 {
    right: 66.66667% !important; }
  .hd_push-8 {
    left: 66.66667% !important; }
  .hd_col-9 {
    flex-basis: 75%;
    max-width: 75%; }
  .hd_pull-9 {
    right: 75% !important; }
  .hd_push-9 {
    left: 75% !important; }
  .hd_col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%; }
  .hd_pull-10 {
    right: 83.33333% !important; }
  .hd_push-10 {
    left: 83.33333% !important; }
  .hd_col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%; }
  .hd_pull-11 {
    right: 91.66667% !important; }
  .hd_push-11 {
    left: 91.66667% !important; }
  .hd_col-12 {
    flex-basis: 100%;
    max-width: 100%; } }

@media screen and (min-width: 1440px) {
  .whd_col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%; }
  .whd_pull-1 {
    right: 8.33333% !important; }
  .whd_push-1 {
    left: 8.33333% !important; }
  .whd_col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%; }
  .whd_pull-2 {
    right: 16.66667% !important; }
  .whd_push-2 {
    left: 16.66667% !important; }
  .whd_col-3 {
    flex-basis: 25%;
    max-width: 25%; }
  .whd_pull-3 {
    right: 25% !important; }
  .whd_push-3 {
    left: 25% !important; }
  .whd_col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%; }
  .whd_pull-4 {
    right: 33.33333% !important; }
  .whd_push-4 {
    left: 33.33333% !important; }
  .whd_col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%; }
  .whd_pull-5 {
    right: 41.66667% !important; }
  .whd_push-5 {
    left: 41.66667% !important; }
  .whd_col-6 {
    flex-basis: 50%;
    max-width: 50%; }
  .whd_pull-6 {
    right: 50% !important; }
  .whd_push-6 {
    left: 50% !important; }
  .whd_col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%; }
  .whd_pull-7 {
    right: 58.33333% !important; }
  .whd_push-7 {
    left: 58.33333% !important; }
  .whd_col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%; }
  .whd_pull-8 {
    right: 66.66667% !important; }
  .whd_push-8 {
    left: 66.66667% !important; }
  .whd_col-9 {
    flex-basis: 75%;
    max-width: 75%; }
  .whd_pull-9 {
    right: 75% !important; }
  .whd_push-9 {
    left: 75% !important; }
  .whd_col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%; }
  .whd_pull-10 {
    right: 83.33333% !important; }
  .whd_push-10 {
    left: 83.33333% !important; }
  .whd_col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%; }
  .whd_pull-11 {
    right: 91.66667% !important; }
  .whd_push-11 {
    left: 91.66667% !important; }
  .whd_col-12 {
    flex-basis: 100%;
    max-width: 100%; } }
