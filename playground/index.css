/*!
 * FrontBox Style 0.0.3
 * Bartosz Piwek
 * https://github.com/BartoszPiwek/FrontBox-Style
 */
/*
Variables

Organize values using variables map and easy-to-read functions or mixins.

Style guide: Variables
*/
/*
Breakpoints

[Default](https://github.com/BartoszPiwek/FrontBox-Style/blob/master/src/variables/breakpoints.scss) breakpoints screen map.
> Declaration can be overwrite by own breakpoints.

Usage:
// $breakpoints : { 
// 		[key: string]: { 
// 			name: string; 
// 			size: number 
// 		}
// }
$breakpoints : { 
	mobile: (
		name: sm,
		size: 576
	),
	tablet: (
		name: md,
		size: 1000
	),
}

Style guide: Variables.breakpoints
*/
/*
Color

Get color value.<br>
Function `color` return index value from `$colors` map.

Function:
// $valueIndex: string
color($valueIndex);

Usage:
// $colors : { 
// 	[key: string]: string
// }
$colors: (
  primary: blue,
  secondary: red
);
.element {
	background: color('primary');
}

Markup: color.html

Style guide: Variables.color
*/
/*
Index

Get index value for property `z-index`.<br>
Function `index` return index value from `$indexes` map.

Function:
// $id: string
index($id);

Usage:
// $indexes : { 
// 	[key: string]: number
// }
$indexes: (
	first: 1,
	last: -1
);
.element {
	z-index: index('first');
}

Markup: index.html

Style guide: Variables.Index
*/
/*
Media

Wrap code in breakpoint screen.

Mixins `media` (min-width) and `media-max` (max-width) take parameter `$name` to wrap code in media query.

> `$name` is variable map name inside `$breakpoints` map ([go to section](section-variables.html#variables-breakpoints)).

Function:
// $index: string;
@include media($index) {}
@include media-max($index) {}

Usage:
.element {
	@include media(tablet) {
		color: red;
	}
	@include media-max(tablet) {
		display: none;
	}
}

Markup: media.html

Style guide: Variables.media
*/
/*
Functions

Resolve common problems with SCSS preprocessor.

Style guide: Functions
*/
/*
Map deep get

Fetch deeply nested values from a map.

Function:
// $deep-map: { 
// 		[key: string]: { 
// 			...
// 		}
// }
// $keys: string[]
map-deep-get($deep-map, $keys...);

Usage:
$deep-map: (
  "first": (
    value: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  ),
  "second": (
    value: "Fusce non orci elit.",
  ),
);
element {
 &:before {
   content: "[#]{map-deep-get($deep-map, first, value)}";
 }
}

Markup: map-deep-get.html

Styleguide: Functions.Map deep get
*/
/*
Modules

Change element behaviors.

Style guide: Modules
*/
/*
Click Expand

Expand click space using pseudo element `before` with prepared class `click-expand`.

Function:
// $space : numberPixel
@include add-click-expand($space);

Usage:
// $space : numberPixel
.link {
	@include add-click-expand(20px);
}

HTML:
<a href="#" class="expand-link link"></a>

Markup: click-expand.html

Style guide: Modules.Click expand
*/
/*
Fixed

Change to position fixed on iOS Safari while scrolling

Style guide: Fix.fixed
*/
/*
Hover

Style states `:hover`, `:active` and `:focus`.

Set flag `$canParentTrigger` to create trigger hover class `&--hover` for any parent element. 

> States only trigger for non touch devices.

Function:
// $canParentTrigger : boolean : false
@include hover($canParentTrigger) {};

Usage:
.selector {
 @include hover(true) {
  color: red;
 };
}

HTML:
<div>
	<span class="selector"></span>
</div>
<div class="selector--hover">
	<span class="selector"></span>
</div>

Markup: hover.html

Style guide: Modules.Hover
*/
/*
Input Placeholder

Style placeholder text inside `input` or `textarea` elements.

Function:
@include add-input-placeholder {};

Usage:
input {
 @include add-input-placeholder {
	color: red;
 }
}

HTML:
<input type="text" placeholder="Placeholder" />
<textarea placeholder="Placeholder"></textarea>

Markup: input-placeholder.html

Style guide: Modules.input-placeholder
*/
/* stylelint-disable */
/*
Scrollbar

Style browser scrollbar.

Function:
// $size : numberPixel
// $color-background : string
// $color-thumb : string
@include scrollbar($size, $color-background, $color-thumb);

Usage:
.scrollbar {
	@include scrollbar(20px, #000, #FFF);
}

HTML:
<div class="scollbar"></div>

Markup: scrollbar.html

Style guide: Modules.Scrollbar
*/
/*
Layout

Style guide: Layout
*/
/*
Grid

Grid system based on the flex display property.

Style:
@extend %grid-style;

Style guide: Layout.Grid
*/
/*
Row

Style form container for columns. 

Style guide: Layout.Grid.Row
*/
/*
Columns

Generate `col` classes.

Parameter `$grid-breakpoints` on default is [$breakpoints](section-variables.html#variables-breakpoints).

> Responsive classes has automatic generated using [responsive](section-functions.html#functions-responsive) mixin.

Function:
// $grid-count : number
// $grid-breakpoints? : $breakpoints
@include grid($grid-count, $breakpoints?);

Usage:
@include grid(12);

Markup: grid.html

Style guide: Layout.Grid.Columns
*/
/*
Offset

Function:
// $grid-count : number
// $grid-breakpoints? : $breakpoints
@include grid-offset($grid-count, $breakpoints?);

Usage:
@include grid-offset(12);

Style guide: Layout.Grid.Offset
*/
/*
Order

Function:
// $grid-count : number
// $grid-breakpoints? : $breakpoints
@include grid-order($grid-count, $breakpoints?);

Usage:
@include grid-order(12);

Style guide: Layout.Grid.Order
*/
/*
Space

Create space between element children's.

Function:
// $space-horizontal : numberPixel
// $space-vertical-y : numberPixel? : $space-horizontal
space-x($space-horizontal);
space-y($space-vertical);
space($space-horizontal, $space-vertical);

Usage:
.space {
 @include space(20px, 10px);
}
.space-x {
 @include space-x(20px);
}
.space-y {
 @include space-y(10px);
}

Markup: space.html

Style guide: Layout.space
*/
/*
Wrap

Crete wrapper element to hold content in specific width with optional aside space.

Function:
// $max-width : pixels
// $$space-aside? : pixels
wrap($max-width, $space-aside);

Usage:
.wrap {
	@extend %wrap-style;
	@include wrap(1024px, 20px);
}

Style:
@extend %wrap-style;

Markup: wrap.html

Style guide: Layout.wrap
*/
/*
Group 

Center elements in content using prepared class `group`.

HTML:
<div class='group></div>

Style:
@include add-group-style;

Markup: group.html

Style guide: Layout.group
*/
/*
Styles

Styles for selectors/classes.

Style guide: Styles
*/
/* stylelint-disable property-no-vendor-prefix */
/* stylelint-disable selector-no-qualifying-type */
/*
Browser reset

Set of CSS rules that resets the styling of all HTML elements to a consistent baseline.
> Recommended for all projects!

Usage:
@include browser-reset-style;

Style guide: Styles.Browser reset
*/
/* Main Elements */
/*
Clearfix

Prepared class `clearfix` to force an element self-clear its children.

Usage:
@include add-cleartfix-style;

HTML:
<div class="clearfix"></div>

Markup: clearfix.html

Style guide: Styles.Clearfix
*/
/*
Generators

Create dynamic code.

Style guide: Generators
*/
/*
Responsive

Create responsive classes with breakpoint name prefix. 

Parameter `$breakpoints-array` on default is [$breakpoints](section-variables.html#variables-breakpoints).

Function:
// $class-name : string
// $breakpoints-array? : $breakpoints
@include responsive($class-name, $breakpoints-array) {};

Usage:
@include responsive(color-red {
	color: red;
}

HTML:
<div class="md_color-red">Color red</div>

Markup: responsive.html

Style guide: Generators.Responsive
*/
/*
Utility count

Create responsive classes for content. 
Generated name selectors will have prefixed with breakpoint name and underscore.

Function:
responsive($breakpoints-array);

Arguments:
$breakpoints-array : { [key: string]: number }? : $breakpoints

Usage:
@include responsive {
	.foo {}	
}

OutputCSS:
.foo {}
@media screen and (min-width: 576px) {
 .sm_foo {}
}
@media screen and (min-width: 768px) {
 .md_foo {}
}
// and so on

Style guide: Generators.Utility count
*/
/*
Shapes

Create CSS shapes.

Style guide: Shapes
*/
/*
Square

Responsive square shape based on element width.

Prepared elements classes:
- `square` - parent
- `square__content` - child. 

HTML:
<div class="square">
	<div class="square__content"></div>
</div>

Markup: square.html

Style:
@import add-square-style;

Style guide: Shapes.square
*/
/*
Triangle

Create triangle shape.

Mixin `add-rectangle` create triangle.

Function:
// $width : numberPixel
// $height : numberPixel
// $position : 'up' | 'right' | 'down' | 'left'
// $color : string
@include add-triangle($width, $height, $position, $color);

Usage:
.triangle-up {
	@include add-triangle(20px, 20px, 'top', #000);
}

HTML:
<div class="triangle-up"></div>

Markup: triangle.html

Style guide: Shapes.Triangle
*/
/*
Circle

Responsive circle shape based on element width.

Prepared elements classes:
- `circle` - parent
- `circle__content` - child. 

Child element will be centered on axis xy.

Markup: circle.html

Style:
@include add-circle-style;

Style guide: Shapes.circle
*/
/*
Rectangle

Responsive rectangle shape based on element width.

Mixin `add-rectangle` create width to height ratio.

Prepared elements classes:
- `rectangle` - parent
- `rectangle__content` - child. 

Function:
// $width: number
// $height: number
@include add-rectangle($width, $height);

Usage:
.rectangle-16-9 {
 @include add-rectangle(16, 9);
}

HTML:
<div class="rectangle rectangle-16-9">
  <div class="rectangle__content"></div>
</div>

Style:
@include add-rectangle-style;

Markup: rectangle.html

Style guide: Shapes.Rectangle
*/
.aaa {
  color: red;
}

.bbb {
  color: blue;
}

@media screen and (min-width: 576px) {
  .sm_aaa {
    color: red;
  }
  .sm_bbb {
    color: blue;
  }
}

@media screen and (min-width: 768px) {
  .md_aaa {
    color: red;
  }
  .md_bbb {
    color: blue;
  }
}

@media screen and (min-width: 992px) {
  .lg_aaa {
    color: red;
  }
  .lg_bbb {
    color: blue;
  }
}

@media screen and (min-width: 1200px) {
  .xl_aaa {
    color: red;
  }
  .xl_bbb {
    color: blue;
  }
}

@media screen and (min-width: 1366px) {
  .hd_aaa {
    color: red;
  }
  .hd_bbb {
    color: blue;
  }
}

@media screen and (min-width: 1440px) {
  .whd_aaa {
    color: red;
  }
  .whd_bbb {
    color: blue;
  }
}
