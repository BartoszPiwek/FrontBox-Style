@use 'sass:math';
@use './../settings/breakpoints' as *;
@use './../settings/media' as *;
@use './../generators/responsive' as *;

/*
Grid

Grid system based on the flex display property.

Include style form columns and rows.

Usage:
.wrap {
	@include row-style;
}

Style guide: Layout.Grid
*/
@mixin row-style {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	min-width: 100%;

	> * {
		flex-grow: 0;
		flex-shrink: 0;
		min-height: 1px;
	}
}

/*
Columns

Generate `col` classes.

Parameter `$grid-breakpoints` on default is [$breakpoints](section-variables.html#variables-breakpoints).

> Responsive classes has automatic generated using [responsive](section-functions.html#functions-responsive) mixin.

Function:
// $grid-count : number
// $grid-breakpoints? : $breakpoints
@include grid($grid-count, $breakpoints?);

Usage:
@include grid(12);

Markup: grid.html

Style guide: Layout.Grid.Columns
*/

@mixin grid($grid-count, $grid-breakpoints: $breakpoints) {
	@include responsive {
		@for $i from 1 through $grid-count {
			@at-root .#{&}col {
				$value: math.div(100%, math.div($grid-count, $i));

				&-#{$i} {
					flex-basis: $value;
					max-width: $value;
				}

				@if ($i != $grid-count) {
					&-pull-#{$i} {
						right: $value !important;
					}

					&-push-#{$i} {
						margin-left: $value !important;
					}
				}
			}
		}
	}
}
