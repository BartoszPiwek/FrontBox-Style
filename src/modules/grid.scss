/*
Row

Style form container for columns. 
Compatibility with [space](section-modules.html#modules-space) function

Style guide: Grid.row
*/
@mixin grid-style-row {
	.row {
		display: flex;
		position: relative;
		flex-direction: row;
		flex-wrap: wrap;
		width: 100%;

		> * {
			display: flex;
			position: relative;
			flex-direction: column;
			flex-grow: 0;
			flex-shrink: 0;
			height: auto !important;
			min-height: 1px;
		}

		&.row-same {
			* > * {
				flex: 1 1 auto;
			}
		}
	}
}

/*
Columns

Generate CSS flex columns. Parameter `$grid-breakpoints` on default is [$breakpoints](section-variables.html#variables-breakpoints)

Function:
// $grid-count : number
// $grid-breakpoints? : $breakpoints
@include grid($grid-count, $breakpoints?);

Usage:
$breakpoint(
 xs: 0,
 sm: 576,
 md: 768,
 lg: 992,
}
@include grid(12, $breakpoints);

Style:
@include grid-style-row;

Markup: grid.html

Style guide: Grid.columns
*/

@mixin grid($grid-count, $grid-breakpoints: $breakpoints) {
	@include add-responsive($grid-breakpoints) {
		$prefix: &;

		@for $i from 1 through $grid-count {
			@at-root .#{$prefix}col-#{$i}{
				flex-basis: 100% / ($grid-count / $i);
				max-width: 100% / ($grid-count / $i);
			}

			@if $i != $grid-count {
				@at-root .#{$prefix}pull-#{$i}{
					right: 100% / ($grid-count / $i) !important;
				}

				@at-root .#{$prefix}push-#{$i}{
					left: 100% / ($grid-count / $i) !important;
				}

				@at-root .#{$prefix}order-#{$i}{
					order: $i;
				}
			}
		}

		@at-root .#{$prefix}col-shrink{
			flex: 0 0 auto;
		}
	}
}
